{"ast":null,"code":"import * as d3 from \"d3\";\nvar width;\nvar height;\nexport default class MapChart {\n  constructor(element) {\n    this.drawMap = (geoData, climateData, year, dataType) => {\n      console.log(geoData);\n      console.log(climateData);\n      console.log(year);\n      console.log(dataType);\n      var map = d3.select(this.element);\n      console.log(\"map element\", map);\n      var projection = d3.geoMercator().scale(110).translate([+map.attr(\"width\") / 2, +map.attr(\"height\") / 1.4]);\n      console.log(\"projection\", projection);\n      var path = d3.geoPath().projection(projection);\n      d3.select(\"#year-val\").text(year);\n      geoData.forEach(d => {\n        var countries = climateData.filter(row => row.countryCode === d.id);\n        var name = \"\";\n        if (countries.length > 0) name = countries[0].country;\n        d.properties = countries.find(c => c.year === year) || {\n          country: name\n        };\n      });\n      var colors = [\"#f1c40f\", \"#e67e22\", \"#e74c3c\", \"#c0392b\"];\n      var domains = {\n        emissions: [0, 2.5e5, 1e6, 5e6],\n        emissionsPerCapita: [0, 0.5, 2, 10]\n      };\n      var mapColorScale = d3.scaleLinear().domain(domains[dataType]).range(colors);\n      var update = map.selectAll(\".country\").data(geoData);\n      update.enter().append(\"path\").classed(\"country\", true).attr(\"d\", path); //   .on(\"click\", function() {\n      //     var currentDataType = d3.select(\"input:checked\").property(\"value\");\n      //     var country = d3.select(this);\n      //     var isActive = country.classed(\"active\");\n      //     var countryName = isActive ? \"\" : country.data()[0].properties.country;\n      //     // drawBar(climateData, currentDataType, countryName);\n      //     // highlightBars(+d3.select(\"#year\").property(\"value\"));\n      //     d3.selectAll(\".country\").classed(\"active\", false);\n      //     country.classed(\"active\", !isActive);\n      //   })\n      //   .merge(update)\n      //   .transition()\n      //   .duration(750)\n      //   .attr(\"fill\", d => {\n      //     var val = d.properties[dataType];\n      //     return val ? mapColorScale(val) : \"#ccc\";\n      //   });\n\n      d3.select(\".map-title\").text(\"Carbon dioxide \" + graphTitle(dataType) + \", \" + year);\n    };\n\n    // console.log(\"element\", element);\n    // console.log(\"check element:\", element.offsetWidth);\n    width = element.offsetWidth;\n    height = 300;\n    d3.select(element).attr(\"width\", width).attr(\"height\", height).append(\"text\").attr(\"x\", width / 2).attr(\"y\", \"1em\").attr(\"font-size\", \"1.5em\").style(\"text-anchor\", \"middle\").classed(\"map-title\", true);\n    this.element = element;\n  }\n\n}\n\nfunction graphTitle(str) {\n  return str.replace(/[A-Z]/g, c => \" \" + c.toLowerCase());\n}","map":{"version":3,"sources":["/Users/wchen/Dropbox/UMN/2019_Fall/Job/code sample/sample/co2_emission/src/components/MapChart.js"],"names":["d3","width","height","MapChart","constructor","element","drawMap","geoData","climateData","year","dataType","console","log","map","select","projection","geoMercator","scale","translate","attr","path","geoPath","text","forEach","d","countries","filter","row","countryCode","id","name","length","country","properties","find","c","colors","domains","emissions","emissionsPerCapita","mapColorScale","scaleLinear","domain","range","update","selectAll","data","enter","append","classed","graphTitle","offsetWidth","style","str","replace","toLowerCase"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\n\nvar width;\nvar height;\n\nexport default class MapChart {\n  constructor(element) {\n    // console.log(\"element\", element);\n    // console.log(\"check element:\", element.offsetWidth);\n    width = element.offsetWidth;\n    height = 300;\n    d3.select(element)\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"text\")\n      .attr(\"x\", width / 2)\n      .attr(\"y\", \"1em\")\n      .attr(\"font-size\", \"1.5em\")\n      .style(\"text-anchor\", \"middle\")\n      .classed(\"map-title\", true);\n\n    this.element = element;\n  }\n\n  drawMap = (geoData, climateData, year, dataType) => {\n    console.log(geoData);\n    console.log(climateData);\n    console.log(year);\n    console.log(dataType);\n    var map = d3.select(this.element);\n    console.log(\"map element\", map);\n\n    var projection = d3\n      .geoMercator()\n      .scale(110)\n      .translate([+map.attr(\"width\") / 2, +map.attr(\"height\") / 1.4]);\n\n    console.log(\"projection\", projection);\n\n    var path = d3.geoPath().projection(projection);\n\n    d3.select(\"#year-val\").text(year);\n\n    geoData.forEach(d => {\n      var countries = climateData.filter(row => row.countryCode === d.id);\n      var name = \"\";\n      if (countries.length > 0) name = countries[0].country;\n      d.properties = countries.find(c => c.year === year) || { country: name };\n    });\n\n    var colors = [\"#f1c40f\", \"#e67e22\", \"#e74c3c\", \"#c0392b\"];\n\n    var domains = {\n      emissions: [0, 2.5e5, 1e6, 5e6],\n      emissionsPerCapita: [0, 0.5, 2, 10]\n    };\n\n    var mapColorScale = d3\n      .scaleLinear()\n      .domain(domains[dataType])\n      .range(colors);\n\n    var update = map.selectAll(\".country\").data(geoData);\n\n    update\n      .enter()\n      .append(\"path\")\n      .classed(\"country\", true)\n      .attr(\"d\", path);\n    //   .on(\"click\", function() {\n    //     var currentDataType = d3.select(\"input:checked\").property(\"value\");\n    //     var country = d3.select(this);\n    //     var isActive = country.classed(\"active\");\n    //     var countryName = isActive ? \"\" : country.data()[0].properties.country;\n    //     // drawBar(climateData, currentDataType, countryName);\n    //     // highlightBars(+d3.select(\"#year\").property(\"value\"));\n    //     d3.selectAll(\".country\").classed(\"active\", false);\n    //     country.classed(\"active\", !isActive);\n    //   })\n    //   .merge(update)\n    //   .transition()\n    //   .duration(750)\n    //   .attr(\"fill\", d => {\n    //     var val = d.properties[dataType];\n    //     return val ? mapColorScale(val) : \"#ccc\";\n    //   });\n\n    d3.select(\".map-title\").text(\n      \"Carbon dioxide \" + graphTitle(dataType) + \", \" + year\n    );\n  };\n}\n\nfunction graphTitle(str) {\n  return str.replace(/[A-Z]/g, c => \" \" + c.toLowerCase());\n}\n"]},"metadata":{},"sourceType":"module"}