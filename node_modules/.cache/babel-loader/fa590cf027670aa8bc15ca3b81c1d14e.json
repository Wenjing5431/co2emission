{"ast":null,"code":"import * as d3 from \"d3\";\nvar width;\nvar height;\nconst margin = {\n  top: 50,\n  bottom: 130,\n  left: 0,\n  right: 0\n};\nexport default class MapChart {\n  constructor(element) {\n    this.drawMap = (geoData, climateData, year, dataType) => {\n      console.log(geoData);\n      console.log(climateData);\n      console.log(year);\n      console.log(dataType);\n      var map = this.svg; //console.log(\"map element\", map);\n\n      var projection = d3.geoMercator().scale(110).translate([+map.attr(\"width\") / 2, +map.attr(\"height\") / 1.4]);\n      console.log(\"projection\", projection);\n      var path = d3.geoPath().projection(projection);\n      d3.select(\"#year-val\").text(year);\n      geoData.forEach(d => {\n        var countries = climateData.filter(row => row.countryCode === d.id);\n        var name = \"\";\n        if (countries.length > 0) name = countries[0].country;\n        d.properties = countries.find(c => c.year === year) || {\n          country: name\n        };\n      });\n      var colors = [\"#f1c40f\", \"#e67e22\", \"#e74c3c\", \"#c0392b\"];\n      var domains = {\n        emissions: [0, 2.5e5, 1e6, 5e6],\n        emissionsPerCapita: [0, 0.5, 2, 10]\n      };\n      var mapColorScale = d3.scaleLinear().domain(domains[dataType]).range(colors);\n      var update = map.selectAll(\".country\").data(geoData);\n      update.enter().append(\"path\").classed(\"country\", true).attr(\"d\", path).on(\"click\", function () {\n        var currentDataType = d3.select(\"input:checked\").property(\"value\");\n        var country = d3.select(this);\n        var isActive = country.classed(\"active\");\n        var countryName = isActive ? \"\" : country.data()[0].properties.country; // drawBar(climateData, currentDataType, countryName);\n        // highlightBars(+d3.select(\"#year\").property(\"value\"));\n\n        d3.selectAll(\".country\").classed(\"active\", false);\n        country.classed(\"active\", !isActive);\n      }).merge(update).transition().duration(750).attr(\"fill\", d => {\n        var val = d.properties[dataType];\n        return val ? mapColorScale(val) : \"#ccc\";\n      });\n      d3.select(\".map-title\").text(\"Carbon dioxide \" + graphTitle(dataType) + \", \" + year);\n    };\n\n    // console.log(\"element\", element);\n    // console.log(\"check element:\", element.offsetWidth);\n    width = element.offsetWidth + margin.left + margin.right;\n    height = 300 + margin.top + margin.bottom; // d3.select(element)\n    //   .attr(\"width\", width)\n    //   .attr(\"height\", height)\n    //   .append(\"text\")\n    //   .attr(\"x\", width / 2)\n    //   .attr(\"y\", \"1em\")\n    //   .attr(\"font-size\", \"1.5em\")\n    //   .style(\"text-anchor\", \"middle\")\n    //   .classed(\"map-title\", true);\n\n    this.svg = d3.select(element).append(\"svg\").attr(\"width\", width).attr(\"height\", height) //   .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n    this.svg.append(\"text\").attr(\"x\", width / 2).attr(\"y\", \"1em\").attr(\"font-size\", \"1.2em\").style(\"text-anchor\", \"middle\").classed(\"map-title\", true);\n    this.element = element;\n  }\n\n}\n\nfunction graphTitle(str) {\n  return str.replace(/[A-Z]/g, c => \" \" + c.toLowerCase());\n}","map":{"version":3,"sources":["/Users/wchen/Dropbox/UMN/2019_Fall/Job/code sample/sample/co2_emission/src/components/MapChart.js"],"names":["d3","width","height","margin","top","bottom","left","right","MapChart","constructor","element","drawMap","geoData","climateData","year","dataType","console","log","map","svg","projection","geoMercator","scale","translate","attr","path","geoPath","select","text","forEach","d","countries","filter","row","countryCode","id","name","length","country","properties","find","c","colors","domains","emissions","emissionsPerCapita","mapColorScale","scaleLinear","domain","range","update","selectAll","data","enter","append","classed","on","currentDataType","property","isActive","countryName","merge","transition","duration","val","graphTitle","offsetWidth","style","str","replace","toLowerCase"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AAEA,IAAIC,KAAJ;AACA,IAAIC,MAAJ;AACA,MAAMC,MAAM,GAAG;AAAEC,EAAAA,GAAG,EAAE,EAAP;AAAWC,EAAAA,MAAM,EAAE,GAAnB;AAAwBC,EAAAA,IAAI,EAAE,CAA9B;AAAiCC,EAAAA,KAAK,EAAE;AAAxC,CAAf;AAEA,eAAe,MAAMC,QAAN,CAAe;AAC5BC,EAAAA,WAAW,CAACC,OAAD,EAAU;AAAA,SAkCrBC,OAlCqB,GAkCX,CAACC,OAAD,EAAUC,WAAV,EAAuBC,IAAvB,EAA6BC,QAA7B,KAA0C;AAClDC,MAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,UAAIG,GAAG,GAAG,KAAKC,GAAf,CALkD,CAMlD;;AAEA,UAAIC,UAAU,GAAGpB,EAAE,CAChBqB,WADc,GAEdC,KAFc,CAER,GAFQ,EAGdC,SAHc,CAGJ,CAAC,CAACL,GAAG,CAACM,IAAJ,CAAS,OAAT,CAAD,GAAqB,CAAtB,EAAyB,CAACN,GAAG,CAACM,IAAJ,CAAS,QAAT,CAAD,GAAsB,GAA/C,CAHI,CAAjB;AAKAR,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BG,UAA1B;AAEA,UAAIK,IAAI,GAAGzB,EAAE,CAAC0B,OAAH,GAAaN,UAAb,CAAwBA,UAAxB,CAAX;AAEApB,MAAAA,EAAE,CAAC2B,MAAH,CAAU,WAAV,EAAuBC,IAAvB,CAA4Bd,IAA5B;AAEAF,MAAAA,OAAO,CAACiB,OAAR,CAAgBC,CAAC,IAAI;AACnB,YAAIC,SAAS,GAAGlB,WAAW,CAACmB,MAAZ,CAAmBC,GAAG,IAAIA,GAAG,CAACC,WAAJ,KAAoBJ,CAAC,CAACK,EAAhD,CAAhB;AACA,YAAIC,IAAI,GAAG,EAAX;AACA,YAAIL,SAAS,CAACM,MAAV,GAAmB,CAAvB,EAA0BD,IAAI,GAAGL,SAAS,CAAC,CAAD,CAAT,CAAaO,OAApB;AAC1BR,QAAAA,CAAC,CAACS,UAAF,GAAeR,SAAS,CAACS,IAAV,CAAeC,CAAC,IAAIA,CAAC,CAAC3B,IAAF,KAAWA,IAA/B,KAAwC;AAAEwB,UAAAA,OAAO,EAAEF;AAAX,SAAvD;AACD,OALD;AAOA,UAAIM,MAAM,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,CAAb;AAEA,UAAIC,OAAO,GAAG;AACZC,QAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,KAAJ,EAAW,GAAX,EAAgB,GAAhB,CADC;AAEZC,QAAAA,kBAAkB,EAAE,CAAC,CAAD,EAAI,GAAJ,EAAS,CAAT,EAAY,EAAZ;AAFR,OAAd;AAKA,UAAIC,aAAa,GAAG9C,EAAE,CACnB+C,WADiB,GAEjBC,MAFiB,CAEVL,OAAO,CAAC5B,QAAD,CAFG,EAGjBkC,KAHiB,CAGXP,MAHW,CAApB;AAKA,UAAIQ,MAAM,GAAGhC,GAAG,CAACiC,SAAJ,CAAc,UAAd,EAA0BC,IAA1B,CAA+BxC,OAA/B,CAAb;AAEAsC,MAAAA,MAAM,CACHG,KADH,GAEGC,MAFH,CAEU,MAFV,EAGGC,OAHH,CAGW,SAHX,EAGsB,IAHtB,EAIG/B,IAJH,CAIQ,GAJR,EAIaC,IAJb,EAMG+B,EANH,CAMM,OANN,EAMe,YAAW;AACtB,YAAIC,eAAe,GAAGzD,EAAE,CAAC2B,MAAH,CAAU,eAAV,EAA2B+B,QAA3B,CAAoC,OAApC,CAAtB;AACA,YAAIpB,OAAO,GAAGtC,EAAE,CAAC2B,MAAH,CAAU,IAAV,CAAd;AACA,YAAIgC,QAAQ,GAAGrB,OAAO,CAACiB,OAAR,CAAgB,QAAhB,CAAf;AACA,YAAIK,WAAW,GAAGD,QAAQ,GAAG,EAAH,GAAQrB,OAAO,CAACc,IAAR,GAAe,CAAf,EAAkBb,UAAlB,CAA6BD,OAA/D,CAJsB,CAKtB;AACA;;AACAtC,QAAAA,EAAE,CAACmD,SAAH,CAAa,UAAb,EAAyBI,OAAzB,CAAiC,QAAjC,EAA2C,KAA3C;AACAjB,QAAAA,OAAO,CAACiB,OAAR,CAAgB,QAAhB,EAA0B,CAACI,QAA3B;AACD,OAfH,EAgBGE,KAhBH,CAgBSX,MAhBT,EAiBGY,UAjBH,GAkBGC,QAlBH,CAkBY,GAlBZ,EAmBGvC,IAnBH,CAmBQ,MAnBR,EAmBgBM,CAAC,IAAI;AACjB,YAAIkC,GAAG,GAAGlC,CAAC,CAACS,UAAF,CAAaxB,QAAb,CAAV;AACA,eAAOiD,GAAG,GAAGlB,aAAa,CAACkB,GAAD,CAAhB,GAAwB,MAAlC;AACD,OAtBH;AAwBAhE,MAAAA,EAAE,CAAC2B,MAAH,CAAU,YAAV,EAAwBC,IAAxB,CACE,oBAAoBqC,UAAU,CAAClD,QAAD,CAA9B,GAA2C,IAA3C,GAAkDD,IADpD;AAGD,KArGoB;;AACnB;AACA;AACAb,IAAAA,KAAK,GAAGS,OAAO,CAACwD,WAAR,GAAsB/D,MAAM,CAACG,IAA7B,GAAoCH,MAAM,CAACI,KAAnD;AACAL,IAAAA,MAAM,GAAG,MAAMC,MAAM,CAACC,GAAb,GAAmBD,MAAM,CAACE,MAAnC,CAJmB,CAMnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAKc,GAAL,GAAWnB,EAAE,CACV2B,MADQ,CACDjB,OADC,EAER4C,MAFQ,CAED,KAFC,EAGR9B,IAHQ,CAGH,OAHG,EAGMvB,KAHN,EAIRuB,IAJQ,CAIH,QAJG,EAIOtB,MAJP,EAKT;AALS,KAMRsB,IANQ,CAMH,WANG,EAMW,aAAYrB,MAAM,CAACG,IAAK,KAAIH,MAAM,CAACC,GAAI,GANlD,CAAX;AAQA,SAAKe,GAAL,CACGmC,MADH,CACU,MADV,EAEG9B,IAFH,CAEQ,GAFR,EAEavB,KAAK,GAAG,CAFrB,EAGGuB,IAHH,CAGQ,GAHR,EAGa,KAHb,EAIGA,IAJH,CAIQ,WAJR,EAIqB,OAJrB,EAKG2C,KALH,CAKS,aALT,EAKwB,QALxB,EAMGZ,OANH,CAMW,WANX,EAMwB,IANxB;AAQA,SAAK7C,OAAL,GAAeA,OAAf;AACD;;AAjC2B;;AAyG9B,SAASuD,UAAT,CAAoBG,GAApB,EAAyB;AACvB,SAAOA,GAAG,CAACC,OAAJ,CAAY,QAAZ,EAAsB5B,CAAC,IAAI,MAAMA,CAAC,CAAC6B,WAAF,EAAjC,CAAP;AACD","sourcesContent":["import * as d3 from \"d3\";\n\nvar width;\nvar height;\nconst margin = { top: 50, bottom: 130, left: 0, right: 0 };\n\nexport default class MapChart {\n  constructor(element) {\n    // console.log(\"element\", element);\n    // console.log(\"check element:\", element.offsetWidth);\n    width = element.offsetWidth + margin.left + margin.right;\n    height = 300 + margin.top + margin.bottom;\n\n    // d3.select(element)\n    //   .attr(\"width\", width)\n    //   .attr(\"height\", height)\n    //   .append(\"text\")\n    //   .attr(\"x\", width / 2)\n    //   .attr(\"y\", \"1em\")\n    //   .attr(\"font-size\", \"1.5em\")\n    //   .style(\"text-anchor\", \"middle\")\n    //   .classed(\"map-title\", true);\n    this.svg = d3\n      .select(element)\n      .append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      //   .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n    this.svg\n      .append(\"text\")\n      .attr(\"x\", width / 2)\n      .attr(\"y\", \"1em\")\n      .attr(\"font-size\", \"1.2em\")\n      .style(\"text-anchor\", \"middle\")\n      .classed(\"map-title\", true);\n\n    this.element = element;\n  }\n\n  drawMap = (geoData, climateData, year, dataType) => {\n    console.log(geoData);\n    console.log(climateData);\n    console.log(year);\n    console.log(dataType);\n    var map = this.svg;\n    //console.log(\"map element\", map);\n\n    var projection = d3\n      .geoMercator()\n      .scale(110)\n      .translate([+map.attr(\"width\") / 2, +map.attr(\"height\") / 1.4]);\n\n    console.log(\"projection\", projection);\n\n    var path = d3.geoPath().projection(projection);\n\n    d3.select(\"#year-val\").text(year);\n\n    geoData.forEach(d => {\n      var countries = climateData.filter(row => row.countryCode === d.id);\n      var name = \"\";\n      if (countries.length > 0) name = countries[0].country;\n      d.properties = countries.find(c => c.year === year) || { country: name };\n    });\n\n    var colors = [\"#f1c40f\", \"#e67e22\", \"#e74c3c\", \"#c0392b\"];\n\n    var domains = {\n      emissions: [0, 2.5e5, 1e6, 5e6],\n      emissionsPerCapita: [0, 0.5, 2, 10]\n    };\n\n    var mapColorScale = d3\n      .scaleLinear()\n      .domain(domains[dataType])\n      .range(colors);\n\n    var update = map.selectAll(\".country\").data(geoData);\n\n    update\n      .enter()\n      .append(\"path\")\n      .classed(\"country\", true)\n      .attr(\"d\", path)\n\n      .on(\"click\", function() {\n        var currentDataType = d3.select(\"input:checked\").property(\"value\");\n        var country = d3.select(this);\n        var isActive = country.classed(\"active\");\n        var countryName = isActive ? \"\" : country.data()[0].properties.country;\n        // drawBar(climateData, currentDataType, countryName);\n        // highlightBars(+d3.select(\"#year\").property(\"value\"));\n        d3.selectAll(\".country\").classed(\"active\", false);\n        country.classed(\"active\", !isActive);\n      })\n      .merge(update)\n      .transition()\n      .duration(750)\n      .attr(\"fill\", d => {\n        var val = d.properties[dataType];\n        return val ? mapColorScale(val) : \"#ccc\";\n      });\n\n    d3.select(\".map-title\").text(\n      \"Carbon dioxide \" + graphTitle(dataType) + \", \" + year\n    );\n  };\n}\n\nfunction graphTitle(str) {\n  return str.replace(/[A-Z]/g, c => \" \" + c.toLowerCase());\n}\n"]},"metadata":{},"sourceType":"module"}