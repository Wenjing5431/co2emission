{"ast":null,"code":"var _jsxFileName = \"/Users/wchen/Dropbox/UMN/2019_Fall/Job/code sample/sample/co2_emission/src/components/MapChartWrapper.js\";\nimport React, { Component } from \"react\";\nimport allData from \"../data/all_data.csv\";\nimport MapChart from \"./MapChart\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\n\nclass MapChartWrapper extends Component {\n  constructor() {\n    super();\n    this.state = {\n      extremeYears: \"\",\n      currentYear: \"\",\n      currentDataType: \"\",\n      geoData: \"\",\n      width: \"\",\n      height: \"\"\n    };\n    var promises = [d3.json(\"http://unpkg.com/world-atlas@1.1.4/world/50m.json\"), d3.csv(allData, row => {\n      return {\n        continent: row.Continent,\n        country: row.Country,\n        countryCode: row[\"Country Code\"],\n        emissions: +row[\"Emissions\"],\n        emissionsPerCapita: +row[\"Emissions Per Capita\"],\n        region: row.Region,\n        year: +row.Year\n      };\n    })];\n    Promise.all(promises).then(data => {\n      this.ready.bind(this)(data[0], data[1]);\n    }).catch(error => {\n      console.log(\"error\", error);\n    });\n  }\n\n  ready(mapData, data) {\n    var extremeYears = d3.extent(data, d => d.year);\n    var currentYear = extremeYears[0];\n    var currentDataType = d3.select('input[name=\"data-type\"]:checked').attr(\"value\");\n    console.log(\"currentdata:\", currentYear);\n    var geoData = topojson.feature(mapData, mapData.objects.countries).features;\n    console.log(\"geoData:\", geoData);\n    var width = +d3.select(\".chart-container\").node().offsetWidth;\n    console.log(\"width is?\", width);\n    var height = 300;\n    this.setState({\n      extremeYears,\n      currentYear,\n      currentDataType,\n      geoData,\n      width: width,\n      height: height\n    });\n  }\n\n  componentDidMount() {\n    // new D3Chart(this.refs.mapChart);\n    this.setState({\n      mapchart: new MapChart(this.refs.mapChart, this.state.width, this.state.width * 4 / 5)\n    });\n  }\n\n  render() {\n    const {\n      width,\n      height\n    } = this.state;\n    console.log(\"this width:\", width);\n    return React.createElement(\"div\", {\n      ref: \"mapChart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default MapChartWrapper;","map":{"version":3,"sources":["/Users/wchen/Dropbox/UMN/2019_Fall/Job/code sample/sample/co2_emission/src/components/MapChartWrapper.js"],"names":["React","Component","allData","MapChart","d3","topojson","MapChartWrapper","constructor","state","extremeYears","currentYear","currentDataType","geoData","width","height","promises","json","csv","row","continent","Continent","country","Country","countryCode","emissions","emissionsPerCapita","region","Region","year","Year","Promise","all","then","data","ready","bind","catch","error","console","log","mapData","extent","d","select","attr","feature","objects","countries","features","node","offsetWidth","setState","componentDidMount","mapchart","refs","mapChart","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport allData from \"../data/all_data.csv\";\nimport MapChart from \"./MapChart\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\n\nclass MapChartWrapper extends Component {\n  constructor() {\n    super();\n    this.state = {\n      extremeYears: \"\",\n      currentYear: \"\",\n      currentDataType: \"\",\n      geoData: \"\",\n      width: \"\",\n      height: \"\"\n    };\n\n    var promises = [\n      d3.json(\"http://unpkg.com/world-atlas@1.1.4/world/50m.json\"),\n      d3.csv(allData, row => {\n        return {\n          continent: row.Continent,\n          country: row.Country,\n          countryCode: row[\"Country Code\"],\n          emissions: +row[\"Emissions\"],\n          emissionsPerCapita: +row[\"Emissions Per Capita\"],\n          region: row.Region,\n          year: +row.Year\n        };\n      })\n    ];\n    Promise.all(promises)\n      .then(data => {\n        this.ready.bind(this)(data[0], data[1]);\n      })\n      .catch(error => {\n        console.log(\"error\", error);\n      });\n  }\n\n  ready(mapData, data) {\n    var extremeYears = d3.extent(data, d => d.year);\n    var currentYear = extremeYears[0];\n    var currentDataType = d3\n      .select('input[name=\"data-type\"]:checked')\n      .attr(\"value\");\n    console.log(\"currentdata:\", currentYear);\n    var geoData = topojson.feature(mapData, mapData.objects.countries).features;\n    console.log(\"geoData:\", geoData);\n\n    var width = +d3.select(\".chart-container\").node().offsetWidth;\n    console.log(\"width is?\", width);\n    var height = 300;\n\n    this.setState({\n      extremeYears,\n      currentYear,\n      currentDataType,\n      geoData,\n      width: width,\n      height: height\n    });\n  }\n\n  componentDidMount() {\n    // new D3Chart(this.refs.mapChart);\n\n    this.setState({\n      mapchart: new MapChart(\n        this.refs.mapChart,\n        this.state.width,\n        (this.state.width * 4) / 5\n      )\n    });\n  }\n\n  render() {\n    const { width, height } = this.state;\n    console.log(\"this width:\", width);\n    return <div ref=\"mapChart\"></div>;\n  }\n}\n\nexport default MapChartWrapper;\n"]},"metadata":{},"sourceType":"module"}