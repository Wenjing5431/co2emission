{"ast":null,"code":"var _jsxFileName = \"/Users/wchen/Dropbox/UMN/2019_Fall/Job/code sample/sample/co2_emission/src/components/MapChartWrapper.js\";\nimport React, { Component } from \"react\";\nimport allData from \"../data/all_data.csv\";\nimport MapChart from \"./MapChart\";\nimport PieChart from \"./PieChart\";\nimport BarChart from \"./BarChart\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport \"../css/MapChartWrapper.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nclass MapChartWrapper extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: \"\",\n      extremeYears: \"\",\n      currentYear: \"\",\n      currentDataType: \"\",\n      geoData: \"\",\n      width: \"\",\n      height: \"\"\n    };\n    var promises = [d3.json(\"http://unpkg.com/world-atlas@1.1.4/world/50m.json\"), d3.csv(allData, row => {\n      return {\n        continent: row.Continent,\n        country: row.Country,\n        countryCode: row[\"Country Code\"],\n        emissions: +row[\"Emissions\"],\n        emissionsPerCapita: +row[\"Emissions Per Capita\"],\n        region: row.Region,\n        year: +row.Year\n      };\n    })];\n    Promise.all(promises).then(data => {\n      this.ready.bind(this)(data[0], data[1]);\n    }).catch(error => {\n      console.log(\"error\", error);\n    });\n  }\n\n  ready(mapData, data) {\n    var extremeYears = d3.extent(data, d => d.year);\n    var currentYear = extremeYears[0];\n    var currentDataType = d3.select('input[name=\"data-type\"]:checked').attr(\"value\");\n    var geoData = topojson.feature(mapData, mapData.objects.countries).features;\n    var width = +d3.select(\".chart-container\").node().offsetWidth;\n    var height = 300;\n    this.setState({\n      data,\n      extremeYears,\n      currentYear,\n      currentDataType,\n      geoData,\n      width,\n      height,\n      mapchart: new MapChart(this.refs.mapChart),\n      piechart: new PieChart(this.refs.pieChart),\n      barchart: new BarChart(this.refs.barChart)\n    });\n    this.state.mapchart.drawMap(geoData, data, currentYear, currentDataType);\n    this.state.piechart.drawPie(data, currentYear);\n    this.state.barchart.drawBar(data, currentDataType, \"\");\n    d3.select(\"#year\").property(\"min\", currentYear).property(\"max\", extremeYears[1]).property(\"value\", currentYear).on(\"input\", () => {\n      currentYear = +d3.event.target.value;\n      this.state.mapchart.drawMap(geoData, data, currentYear, currentDataType);\n      this.state.piechart.drawPie(data, currentYear);\n      this.state.barchart.highlightBars(currentYear);\n    });\n    d3.selectAll('input[name=\"data-type\"]').on(\"change\", () => {\n      var active = d3.select(\".active\").data()[0];\n      var country = active ? active.properties.country : \"\";\n      currentDataType = d3.event.target.value;\n      this.state.mapchart.drawMap(geoData, data, currentYear, currentDataType, this.state.barchart);\n      this.state.barchart.drawBar(data, currentDataType, country);\n    });\n    d3.selectAll(\"svg\").on(\"mousemove touchmove\", updateTooltip);\n\n    function updateTooltip() {\n      var tooltip = d3.select(\".tooltip\");\n      var tgt = d3.select(d3.event.target);\n      var isCountry = tgt.classed(\"country\");\n      var isBar = tgt.classed(\"bar\");\n      var isArc = tgt.classed(\"arc\");\n      var dataType = d3.select(\"input:checked\").property(\"value\");\n      var units = dataType === \"emissions\" ? \"thousand metric tons\" : \"metric tons per capita\";\n      var data;\n      var percentage = \"\";\n      if (isCountry) data = tgt.data()[0].properties;\n\n      if (isArc) {\n        data = tgt.data()[0].data;\n        percentage = `<p>Percentage of total: ${getPercentage(tgt.data()[0])}</p>`;\n      }\n\n      if (isBar) data = tgt.data()[0];\n      tooltip.style(\"opacity\", +(isCountry || isArc || isBar)).style(\"left\", d3.event.pageX - tooltip.node().offsetWidth / 2 + \"px\").style(\"top\", d3.event.pageY - tooltip.node().offsetHeight - 10 + \"px\");\n\n      if (data) {\n        var dataValue = data[dataType] ? data[dataType].toLocaleString() + \" \" + units : \"Data Not Available\";\n        tooltip.html(`\n                <p>Country: ${data.country}</p>\n                <p>${formatDataType(dataType)}: ${dataValue}</p>\n                <p>Year: ${data.year || d3.select(\"#year\").property(\"value\")}</p>\n                ${percentage}\n              `);\n      }\n    }\n\n    function formatDataType(key) {\n      return key[0].toUpperCase() + key.slice(1).replace(/[A-Z]/g, c => \" \" + c);\n    }\n\n    function getPercentage(d) {\n      var angle = d.endAngle - d.startAngle;\n      var fraction = 100 * angle / (Math.PI * 2);\n      return fraction.toFixed(2) + \"%\";\n    }\n  }\n\n  componentDidMount() {// this.setState({\n    //   mapchart: new MapChart(this.refs.mapChart)\n    // });\n  }\n\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  componentWillReceiveProps() {//     const { geoData, data, currentYear } = this.state;\n    //     this.state.mapchart.drawMap(geoData, data, currentYear);\n    // const { geoData, data, currentYear, currentDataType } = this.state;\n    // this.state.mapchart.drawMap(geoData, data, currentYear, currentDataType);\n  }\n\n  render() {\n    const {\n      width,\n      height\n    } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"dashboard-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"CO\", React.createElement(\"sub\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"2\"), \" Emissions in Twenty-One Years\"), React.createElement(Container, {\n      className: \"data-dashboard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 4,\n      style: {\n        backgroundColor: \"#202020\",\n        paddingBottom: \"65px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"nav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"Current year: \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      id: \"year-val\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      id: \"year\",\n      type: \"range\",\n      step: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"Choose between:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"data-type\",\n      value: \"emissions\",\n      defaultChecked: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"Emissions\"), React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"data-type\",\n      value: \"emissionsPerCapita\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, \"Emissions Per Capita\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, \"Click on a country to see its trends by year.\"))), React.createElement(Col, {\n      sm: 8,\n      style: {\n        backgroundColor: \"#202020\",\n        paddingBottom: \"65px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"chart-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: \"mapChart\",\n      style: {\n        width: width,\n        height: height,\n        marginTop: \"-20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }))))), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 6,\n      className: \"piechart-card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"chart-container sub-chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: \"pieChart\",\n      style: {\n        width: width,\n        height: height\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }))), React.createElement(Col, {\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"chart-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: \"barChart\",\n      style: {\n        width: width,\n        height: height\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }))))), React.createElement(\"div\", {\n      className: \"tooltip\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default MapChartWrapper;","map":{"version":3,"sources":["/Users/wchen/Dropbox/UMN/2019_Fall/Job/code sample/sample/co2_emission/src/components/MapChartWrapper.js"],"names":["React","Component","allData","MapChart","PieChart","BarChart","d3","topojson","Container","Row","Col","MapChartWrapper","constructor","state","data","extremeYears","currentYear","currentDataType","geoData","width","height","promises","json","csv","row","continent","Continent","country","Country","countryCode","emissions","emissionsPerCapita","region","Region","year","Year","Promise","all","then","ready","bind","catch","error","console","log","mapData","extent","d","select","attr","feature","objects","countries","features","node","offsetWidth","setState","mapchart","refs","mapChart","piechart","pieChart","barchart","barChart","drawMap","drawPie","drawBar","property","on","event","target","value","highlightBars","selectAll","active","properties","updateTooltip","tooltip","tgt","isCountry","classed","isBar","isArc","dataType","units","percentage","getPercentage","style","pageX","pageY","offsetHeight","dataValue","toLocaleString","html","formatDataType","key","toUpperCase","slice","replace","c","angle","endAngle","startAngle","fraction","Math","PI","toFixed","componentDidMount","shouldComponentUpdate","componentWillReceiveProps","render","backgroundColor","paddingBottom","marginTop"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport allData from \"../data/all_data.csv\";\nimport MapChart from \"./MapChart\";\nimport PieChart from \"./PieChart\";\nimport BarChart from \"./BarChart\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport \"../css/MapChartWrapper.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nclass MapChartWrapper extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: \"\",\n      extremeYears: \"\",\n      currentYear: \"\",\n      currentDataType: \"\",\n      geoData: \"\",\n      width: \"\",\n      height: \"\"\n    };\n\n    var promises = [\n      d3.json(\"http://unpkg.com/world-atlas@1.1.4/world/50m.json\"),\n      d3.csv(allData, row => {\n        return {\n          continent: row.Continent,\n          country: row.Country,\n          countryCode: row[\"Country Code\"],\n          emissions: +row[\"Emissions\"],\n          emissionsPerCapita: +row[\"Emissions Per Capita\"],\n          region: row.Region,\n          year: +row.Year\n        };\n      })\n    ];\n    Promise.all(promises)\n      .then(data => {\n        this.ready.bind(this)(data[0], data[1]);\n      })\n      .catch(error => {\n        console.log(\"error\", error);\n      });\n  }\n\n  ready(mapData, data) {\n    var extremeYears = d3.extent(data, d => d.year);\n    var currentYear = extremeYears[0];\n    var currentDataType = d3\n      .select('input[name=\"data-type\"]:checked')\n      .attr(\"value\");\n\n    var geoData = topojson.feature(mapData, mapData.objects.countries).features;\n\n    var width = +d3.select(\".chart-container\").node().offsetWidth;\n\n    var height = 300;\n\n    this.setState({\n      data,\n      extremeYears,\n      currentYear,\n      currentDataType,\n      geoData,\n      width,\n      height,\n      mapchart: new MapChart(this.refs.mapChart),\n      piechart: new PieChart(this.refs.pieChart),\n      barchart: new BarChart(this.refs.barChart)\n    });\n\n    this.state.mapchart.drawMap(geoData, data, currentYear, currentDataType);\n    this.state.piechart.drawPie(data, currentYear);\n    this.state.barchart.drawBar(data, currentDataType, \"\");\n\n    d3.select(\"#year\")\n      .property(\"min\", currentYear)\n      .property(\"max\", extremeYears[1])\n      .property(\"value\", currentYear)\n      .on(\"input\", () => {\n        currentYear = +d3.event.target.value;\n        this.state.mapchart.drawMap(\n          geoData,\n          data,\n          currentYear,\n          currentDataType\n        );\n        this.state.piechart.drawPie(data, currentYear);\n        this.state.barchart.highlightBars(currentYear);\n      });\n\n    d3.selectAll('input[name=\"data-type\"]').on(\"change\", () => {\n      var active = d3.select(\".active\").data()[0];\n      var country = active ? active.properties.country : \"\";\n      currentDataType = d3.event.target.value;\n      this.state.mapchart.drawMap(\n        geoData,\n        data,\n        currentYear,\n        currentDataType,\n        this.state.barchart\n      );\n      this.state.barchart.drawBar(data, currentDataType, country);\n    });\n\n    d3.selectAll(\"svg\").on(\"mousemove touchmove\", updateTooltip);\n\n    function updateTooltip() {\n      var tooltip = d3.select(\".tooltip\");\n      var tgt = d3.select(d3.event.target);\n      var isCountry = tgt.classed(\"country\");\n      var isBar = tgt.classed(\"bar\");\n      var isArc = tgt.classed(\"arc\");\n      var dataType = d3.select(\"input:checked\").property(\"value\");\n      var units =\n        dataType === \"emissions\"\n          ? \"thousand metric tons\"\n          : \"metric tons per capita\";\n      var data;\n      var percentage = \"\";\n      if (isCountry) data = tgt.data()[0].properties;\n      if (isArc) {\n        data = tgt.data()[0].data;\n        percentage = `<p>Percentage of total: ${getPercentage(\n          tgt.data()[0]\n        )}</p>`;\n      }\n      if (isBar) data = tgt.data()[0];\n      tooltip\n        .style(\"opacity\", +(isCountry || isArc || isBar))\n        .style(\"left\", d3.event.pageX - tooltip.node().offsetWidth / 2 + \"px\")\n        .style(\"top\", d3.event.pageY - tooltip.node().offsetHeight - 10 + \"px\");\n      if (data) {\n        var dataValue = data[dataType]\n          ? data[dataType].toLocaleString() + \" \" + units\n          : \"Data Not Available\";\n        tooltip.html(`\n                <p>Country: ${data.country}</p>\n                <p>${formatDataType(dataType)}: ${dataValue}</p>\n                <p>Year: ${data.year ||\n                  d3.select(\"#year\").property(\"value\")}</p>\n                ${percentage}\n              `);\n      }\n    }\n\n    function formatDataType(key) {\n      return (\n        key[0].toUpperCase() + key.slice(1).replace(/[A-Z]/g, c => \" \" + c)\n      );\n    }\n\n    function getPercentage(d) {\n      var angle = d.endAngle - d.startAngle;\n      var fraction = (100 * angle) / (Math.PI * 2);\n      return fraction.toFixed(2) + \"%\";\n    }\n  }\n\n  componentDidMount() {\n    // this.setState({\n    //   mapchart: new MapChart(this.refs.mapChart)\n    // });\n  }\n\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  componentWillReceiveProps() {\n    //     const { geoData, data, currentYear } = this.state;\n    //     this.state.mapchart.drawMap(geoData, data, currentYear);\n    // const { geoData, data, currentYear, currentDataType } = this.state;\n    // this.state.mapchart.drawMap(geoData, data, currentYear, currentDataType);\n  }\n\n  render() {\n    const { width, height } = this.state;\n\n    return (\n      <div>\n        <h2 className=\"dashboard-title\">\n          CO<sub>2</sub> Emissions in Twenty-One Years\n        </h2>\n        <Container className=\"data-dashboard\">\n          <Row>\n            <Col\n              sm={4}\n              style={{ backgroundColor: \"#202020\", paddingBottom: \"65px\" }}\n            >\n              <div id=\"nav\">\n                <p>\n                  Current year: <br />\n                  <span id=\"year-val\"></span>\n                  <input id=\"year\" type=\"range\" step=\"1\" />\n                </p>\n                <p>\n                  Choose between:\n                  <br />\n                  <input\n                    type=\"radio\"\n                    name=\"data-type\"\n                    value=\"emissions\"\n                    defaultChecked\n                  />\n                  <label>Emissions</label>\n                  <input\n                    type=\"radio\"\n                    name=\"data-type\"\n                    value=\"emissionsPerCapita\"\n                  />\n                  <label>Emissions Per Capita</label>\n                </p>\n                <p>Click on a country to see its trends by year.</p>\n              </div>\n            </Col>\n            <Col\n              sm={8}\n              style={{ backgroundColor: \"#202020\", paddingBottom: \"65px\" }}\n            >\n              <div className=\"chart-container\">\n                <div\n                  ref=\"mapChart\"\n                  style={{ width: width, height: height, marginTop: \"-20px\" }}\n                ></div>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n        <Container>\n          <Row>\n            <Col sm={6} className=\"piechart-card\">\n              <div className=\"chart-container sub-chart\">\n                <div\n                  ref=\"pieChart\"\n                  style={{ width: width, height: height }}\n                ></div>\n              </div>\n            </Col>\n            <Col sm={6}>\n              <div className=\"chart-container\">\n                <div\n                  ref=\"barChart\"\n                  style={{ width: width, height: height }}\n                ></div>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n\n        <div className=\"tooltip\"></div>\n      </div>\n    );\n  }\n}\n\nexport default MapChartWrapper;\n"]},"metadata":{},"sourceType":"module"}