{"ast":null,"code":"import * as d3 from \"d3\";\nvar width;\nvar height;\nexport default class MapChart {\n  constructor(element) {\n    // console.log(\"element\", element);\n    // console.log(\"check element:\", element.offsetWidth);\n    width = element.offsetWidth;\n    height = 300;\n    d3.select(element).attr(\"width\", width).attr(\"height\", height).append(\"text\").attr(\"x\", width / 2).attr(\"y\", \"1em\").attr(\"font-size\", \"1.5em\").style(\"text-anchor\", \"middle\").classed(\"map-title\", true);\n  }\n\n  drawMap(geoData, climateData, year, dataType) {\n    var map = d3.select(\"#map\");\n    var projection = d3.geoMercator().scale(110).translate([+map.attr(\"width\") / 2, +map.attr(\"height\") / 1.4]);\n    var path = d3.geoPath().projection(projection);\n    d3.select(\"#year-val\").text(year);\n    geoData.forEach(d => {\n      var countries = climateData.filter(row => row.countryCode === d.id);\n      var name = \"\";\n      if (countries.length > 0) name = countries[0].country;\n      d.properties = countries.find(c => c.year === year) || {\n        country: name\n      };\n    });\n    var colors = [\"#f1c40f\", \"#e67e22\", \"#e74c3c\", \"#c0392b\"];\n    var domains = {\n      emissions: [0, 2.5e5, 1e6, 5e6],\n      emissionsPerCapita: [0, 0.5, 2, 10]\n    };\n    var mapColorScale = d3.scaleLinear().domain(domains[dataType]).range(colors);\n    var update = map.selectAll(\".country\").data(geoData);\n    update.enter().append(\"path\").classed(\"country\", true).attr(\"d\", path).on(\"click\", function () {\n      var currentDataType = d3.select(\"input:checked\").property(\"value\");\n      var country = d3.select(this);\n      var isActive = country.classed(\"active\");\n      var countryName = isActive ? \"\" : country.data()[0].properties.country;\n      drawBar(climateData, currentDataType, countryName);\n      highlightBars(+d3.select(\"#year\").property(\"value\"));\n      d3.selectAll(\".country\").classed(\"active\", false);\n      country.classed(\"active\", !isActive);\n    }).merge(update).transition().duration(750).attr(\"fill\", d => {\n      var val = d.properties[dataType];\n      return val ? mapColorScale(val) : \"#ccc\";\n    });\n    d3.select(\".map-title\").text(\"Carbon dioxide \" + graphTitle(dataType) + \", \" + year);\n    console.log(geoData);\n    console.log(climateData);\n    console.log(year);\n    console.log(dataType);\n  }\n\n}","map":{"version":3,"sources":["/Users/wchen/Dropbox/UMN/2019_Fall/Job/code sample/sample/co2_emission/src/components/MapChart.js"],"names":["d3","width","height","MapChart","constructor","element","offsetWidth","select","attr","append","style","classed","drawMap","geoData","climateData","year","dataType","map","projection","geoMercator","scale","translate","path","geoPath","text","forEach","d","countries","filter","row","countryCode","id","name","length","country","properties","find","c","colors","domains","emissions","emissionsPerCapita","mapColorScale","scaleLinear","domain","range","update","selectAll","data","enter","on","currentDataType","property","isActive","countryName","drawBar","highlightBars","merge","transition","duration","val","graphTitle","console","log"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\n\nvar width;\nvar height;\nexport default class MapChart {\n  constructor(element) {\n    // console.log(\"element\", element);\n    // console.log(\"check element:\", element.offsetWidth);\n    width = element.offsetWidth;\n    height = 300;\n    d3.select(element)\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"text\")\n      .attr(\"x\", width / 2)\n      .attr(\"y\", \"1em\")\n      .attr(\"font-size\", \"1.5em\")\n      .style(\"text-anchor\", \"middle\")\n      .classed(\"map-title\", true);\n  }\n\n  drawMap(geoData, climateData, year, dataType) {\n    var map = d3.select(\"#map\");\n\n    var projection = d3\n      .geoMercator()\n      .scale(110)\n      .translate([+map.attr(\"width\") / 2, +map.attr(\"height\") / 1.4]);\n\n    var path = d3.geoPath().projection(projection);\n\n    d3.select(\"#year-val\").text(year);\n\n    geoData.forEach(d => {\n      var countries = climateData.filter(row => row.countryCode === d.id);\n      var name = \"\";\n      if (countries.length > 0) name = countries[0].country;\n      d.properties = countries.find(c => c.year === year) || { country: name };\n    });\n\n    var colors = [\"#f1c40f\", \"#e67e22\", \"#e74c3c\", \"#c0392b\"];\n\n    var domains = {\n      emissions: [0, 2.5e5, 1e6, 5e6],\n      emissionsPerCapita: [0, 0.5, 2, 10]\n    };\n\n    var mapColorScale = d3\n      .scaleLinear()\n      .domain(domains[dataType])\n      .range(colors);\n\n    var update = map.selectAll(\".country\").data(geoData);\n\n    update\n      .enter()\n      .append(\"path\")\n      .classed(\"country\", true)\n      .attr(\"d\", path)\n      .on(\"click\", function() {\n        var currentDataType = d3.select(\"input:checked\").property(\"value\");\n        var country = d3.select(this);\n        var isActive = country.classed(\"active\");\n        var countryName = isActive ? \"\" : country.data()[0].properties.country;\n        drawBar(climateData, currentDataType, countryName);\n        highlightBars(+d3.select(\"#year\").property(\"value\"));\n        d3.selectAll(\".country\").classed(\"active\", false);\n        country.classed(\"active\", !isActive);\n      })\n      .merge(update)\n      .transition()\n      .duration(750)\n      .attr(\"fill\", d => {\n        var val = d.properties[dataType];\n        return val ? mapColorScale(val) : \"#ccc\";\n      });\n\n    d3.select(\".map-title\").text(\n      \"Carbon dioxide \" + graphTitle(dataType) + \", \" + year\n    );\n\n    console.log(geoData);\n    console.log(climateData);\n    console.log(year);\n    console.log(dataType);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}