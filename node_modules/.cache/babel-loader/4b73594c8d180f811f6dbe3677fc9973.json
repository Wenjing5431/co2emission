{"ast":null,"code":"var _jsxFileName = \"/Users/wchen/Dropbox/UMN/2019_Fall/Job/code sample/sample/co2_emission/src/components/MapChartWrapper.js\";\nimport React, { Component } from \"react\";\nimport allData from \"../data/all_data.csv\";\nimport MapChart from \"./MapChart\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport \"../css/MapChartWrapper.css\";\n\nclass MapChartWrapper extends Component {\n  constructor() {\n    super();\n\n    this.handleChange = e => {\n      console.log(\"button value:\", e.target.value);\n      const {\n        name,\n        value\n      } = e.target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.state = {\n      data: \"\",\n      extremeYears: \"\",\n      currentYear: \"\",\n      currentDataType: \"\",\n      geoData: \"\",\n      width: \"\",\n      height: \"\"\n    };\n    var promises = [d3.json(\"http://unpkg.com/world-atlas@1.1.4/world/50m.json\"), d3.csv(allData, row => {\n      return {\n        continent: row.Continent,\n        country: row.Country,\n        countryCode: row[\"Country Code\"],\n        emissions: +row[\"Emissions\"],\n        emissionsPerCapita: +row[\"Emissions Per Capita\"],\n        region: row.Region,\n        year: +row.Year\n      };\n    })];\n    Promise.all(promises).then(data => {\n      this.ready.bind(this)(data[0], data[1]);\n    }).catch(error => {\n      console.log(\"error\", error);\n    });\n  }\n\n  ready(mapData, data) {\n    var extremeYears = d3.extent(data, d => d.year);\n    var currentYear = extremeYears[0]; // var currentDataType = d3\n    //   .select('input[name=\"data-type\"]:checked')\n    //   .attr(\"value\");\n    // console.log(\"ho??\", currentDataType);\n\n    var currentDataType = \"emissions\";\n    var geoData = topojson.feature(mapData, mapData.objects.countries).features;\n    var width = +d3.select(\".chart-container\").node().offsetWidth;\n    var height = 300;\n    this.setState({\n      data,\n      extremeYears,\n      currentYear,\n      currentDataType,\n      geoData,\n      width,\n      height,\n      mapchart: new MapChart(this.refs.mapChart)\n    });\n    this.state.mapchart.drawMap(geoData, data, currentYear, currentDataType);\n  }\n\n  componentDidMount() {// this.setState({\n    //   mapchart: new MapChart(this.refs.mapChart)\n    // });\n  }\n\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  componentWillReceiveProps() {} //     const { geoData, data, currentYear } = this.state;\n  //     this.state.mapchart.drawMap(geoData, data, currentYear);\n  // const { geoData, data, currentYear, currentDataType } = this.state;\n  // this.state.mapchart.drawMap(geoData, data, currentYear, currentDataType);\n  //   componentWillReceiveProps(nextProps) {\n  //     this.state.chart.update3(nextProps.gender);\n  //   }\n\n\n  render() {\n    const {\n      width,\n      height,\n      currentDataType,\n      emissions,\n      emissionsPerCapita\n    } = this.state;\n    console.log(\"currentDataType:\", currentDataType);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"nav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"CO\", React.createElement(\"sub\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"2\"), \" Dashboard\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Explore CO\", React.createElement(\"sub\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"2\"), \" emissions by year. Current year:\", \" \", React.createElement(\"span\", {\n      id: \"year-val\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      id: \"year\",\n      type: \"range\",\n      step: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Choose between total emissions or emissions per capita.\", React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"emissions\",\n      value: emissions,\n      checked: true,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Emissions\"), React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"emissionsPerCapita\",\n      value: emissionsPerCapita,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Emissions Per Capita\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Click on a country to see its trends by year.\")), React.createElement(\"div\", {\n      ref: \"mapChart\",\n      className: \"chart-container\",\n      style: {\n        width: width,\n        height: height\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default MapChartWrapper;","map":{"version":3,"sources":["/Users/wchen/Dropbox/UMN/2019_Fall/Job/code sample/sample/co2_emission/src/components/MapChartWrapper.js"],"names":["React","Component","allData","MapChart","d3","topojson","MapChartWrapper","constructor","handleChange","e","console","log","target","value","name","setState","state","data","extremeYears","currentYear","currentDataType","geoData","width","height","promises","json","csv","row","continent","Continent","country","Country","countryCode","emissions","emissionsPerCapita","region","Region","year","Year","Promise","all","then","ready","bind","catch","error","mapData","extent","d","feature","objects","countries","features","select","node","offsetWidth","mapchart","refs","mapChart","drawMap","componentDidMount","shouldComponentUpdate","componentWillReceiveProps","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport allData from \"../data/all_data.csv\";\nimport MapChart from \"./MapChart\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport \"../css/MapChartWrapper.css\";\n\nclass MapChartWrapper extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: \"\",\n      extremeYears: \"\",\n      currentYear: \"\",\n      currentDataType: \"\",\n      geoData: \"\",\n      width: \"\",\n      height: \"\"\n    };\n\n    var promises = [\n      d3.json(\"http://unpkg.com/world-atlas@1.1.4/world/50m.json\"),\n      d3.csv(allData, row => {\n        return {\n          continent: row.Continent,\n          country: row.Country,\n          countryCode: row[\"Country Code\"],\n          emissions: +row[\"Emissions\"],\n          emissionsPerCapita: +row[\"Emissions Per Capita\"],\n          region: row.Region,\n          year: +row.Year\n        };\n      })\n    ];\n    Promise.all(promises)\n      .then(data => {\n        this.ready.bind(this)(data[0], data[1]);\n      })\n      .catch(error => {\n        console.log(\"error\", error);\n      });\n  }\n\n  ready(mapData, data) {\n    var extremeYears = d3.extent(data, d => d.year);\n    var currentYear = extremeYears[0];\n    // var currentDataType = d3\n    //   .select('input[name=\"data-type\"]:checked')\n    //   .attr(\"value\");\n    // console.log(\"ho??\", currentDataType);\n    var currentDataType = \"emissions\";\n\n    var geoData = topojson.feature(mapData, mapData.objects.countries).features;\n\n    var width = +d3.select(\".chart-container\").node().offsetWidth;\n\n    var height = 300;\n\n    this.setState({\n      data,\n      extremeYears,\n      currentYear,\n      currentDataType,\n      geoData,\n      width,\n      height,\n      mapchart: new MapChart(this.refs.mapChart)\n    });\n\n    this.state.mapchart.drawMap(geoData, data, currentYear, currentDataType);\n  }\n\n  componentDidMount() {\n    // this.setState({\n    //   mapchart: new MapChart(this.refs.mapChart)\n    // });\n  }\n\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  componentWillReceiveProps() {\n    //     const { geoData, data, currentYear } = this.state;\n    //     this.state.mapchart.drawMap(geoData, data, currentYear);\n    // const { geoData, data, currentYear, currentDataType } = this.state;\n    // this.state.mapchart.drawMap(geoData, data, currentYear, currentDataType);\n  }\n\n  //   componentWillReceiveProps(nextProps) {\n  //     this.state.chart.update3(nextProps.gender);\n  //   }\n\n  handleChange = e => {\n    console.log(\"button value:\", e.target.value);\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  render() {\n    const {\n      width,\n      height,\n      currentDataType,\n      emissions,\n      emissionsPerCapita\n    } = this.state;\n    console.log(\"currentDataType:\", currentDataType);\n\n    return (\n      <div>\n        <div id=\"nav\">\n          <h2>\n            CO<sub>2</sub> Dashboard\n          </h2>\n          <p>\n            Explore CO<sub>2</sub> emissions by year. Current year:{\" \"}\n            <span id=\"year-val\"></span>\n            <input id=\"year\" type=\"range\" step=\"1\" />\n          </p>\n          <p>\n            Choose between total emissions or emissions per capita.\n            <input\n              type=\"radio\"\n              name=\"emissions\"\n              value={emissions}\n              checked\n              onChange={this.handleChange}\n            />\n            <label>Emissions</label>\n            <input\n              type=\"radio\"\n              name=\"emissionsPerCapita\"\n              value={emissionsPerCapita}\n              onChange={this.handleChange}\n            />\n            <label>Emissions Per Capita</label>\n          </p>\n          <p>Click on a country to see its trends by year.</p>\n        </div>\n        <div\n          ref=\"mapChart\"\n          className=\"chart-container\"\n          style={{ width: width, height: height }}\n        ></div>\n      </div>\n    );\n  }\n}\n\nexport default MapChartWrapper;\n"]},"metadata":{},"sourceType":"module"}