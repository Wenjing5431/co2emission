{"ast":null,"code":"var _jsxFileName = \"/Users/wchen/Dropbox/UMN/2019_Fall/Job/code sample/sample/co2_emission/src/components/MapChartWrapper.js\";\nimport React, { Component } from \"react\";\nimport allData from \"../data/all_data.csv\";\nimport MapChart from \"./MapChart\";\nimport PieChart from \"./PieChart\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport \"../css/MapChartWrapper.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nclass MapChartWrapper extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: \"\",\n      extremeYears: \"\",\n      currentYear: \"\",\n      currentDataType: \"\",\n      geoData: \"\",\n      width: \"\",\n      height: \"\"\n    };\n    var promises = [d3.json(\"http://unpkg.com/world-atlas@1.1.4/world/50m.json\"), d3.csv(allData, row => {\n      return {\n        continent: row.Continent,\n        country: row.Country,\n        countryCode: row[\"Country Code\"],\n        emissions: +row[\"Emissions\"],\n        emissionsPerCapita: +row[\"Emissions Per Capita\"],\n        region: row.Region,\n        year: +row.Year\n      };\n    })];\n    Promise.all(promises).then(data => {\n      this.ready.bind(this)(data[0], data[1]);\n    }).catch(error => {\n      console.log(\"error\", error);\n    });\n  }\n\n  ready(mapData, data) {\n    var extremeYears = d3.extent(data, d => d.year);\n    var currentYear = extremeYears[0];\n    var currentDataType = d3.select('input[name=\"data-type\"]:checked').attr(\"value\");\n    console.log(\"ho??\", currentDataType);\n    var geoData = topojson.feature(mapData, mapData.objects.countries).features;\n    var width = +d3.select(\".chart-container\").node().offsetWidth;\n    var height = 300;\n    this.setState({\n      data,\n      extremeYears,\n      currentYear,\n      currentDataType,\n      geoData,\n      width,\n      height,\n      mapchart: new MapChart(this.refs.mapChart),\n      piechart: new PieChart(this.refs.pieChart)\n    });\n    this.state.mapchart.drawMap(geoData, data, currentYear, currentDataType);\n    this.state.piechart.drawPie(data, currentYear);\n    d3.select(\"#year\").property(\"min\", currentYear).property(\"max\", extremeYears[1]).property(\"value\", currentYear).on(\"input\", () => {\n      currentYear = +d3.event.target.value;\n      this.state.mapchart.drawMap(geoData, data, currentYear, currentDataType); //   drawPie(data, currentYear);\n      //   highlightBars(currentYear);\n    });\n    d3.selectAll('input[name=\"data-type\"]').on(\"change\", () => {\n      var active = d3.select(\".active\").data()[0];\n      var country = active ? active.properties.country : \"\";\n      currentDataType = d3.event.target.value;\n      this.state.mapchart.drawMap(geoData, data, currentYear, currentDataType); //   drawBar(data, currentDataType, country);\n    });\n  }\n\n  componentDidMount() {// this.setState({\n    //   mapchart: new MapChart(this.refs.mapChart)\n    // });\n  }\n\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  componentWillReceiveProps() {//     const { geoData, data, currentYear } = this.state;\n    //     this.state.mapchart.drawMap(geoData, data, currentYear);\n    // const { geoData, data, currentYear, currentDataType } = this.state;\n    // this.state.mapchart.drawMap(geoData, data, currentYear, currentDataType);\n  }\n\n  render() {\n    const {\n      width,\n      height,\n      currentDataType\n    } = this.state;\n    console.log(\"currentDataType:\", currentDataType);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"dashboard-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"CO\", React.createElement(\"sub\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"2\"), \" Emissions in Twenty-One Years\"), React.createElement(Container, {\n      className: \"data-dashboard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 4,\n      style: {\n        backgroundColor: \"#202020\",\n        paddingBottom: \"50px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"nav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Explore CO\", React.createElement(\"sub\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"2\"), \" emissions by year. Current year:\", \" \", React.createElement(\"span\", {\n      id: \"year-val\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      id: \"year\",\n      type: \"range\",\n      step: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Choose between total emissions or emissions per capita.\", React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"data-type\",\n      value: \"emissions\",\n      defaultChecked: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Emissions\"), React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"data-type\",\n      value: \"emissionsPerCapita\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Emissions Per Capita\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Click on a country to see its trends by year.\"))), React.createElement(Col, {\n      sm: 8,\n      style: {\n        backgroundColor: \"#202020\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"chart-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: \"mapChart\",\n      style: {\n        width: width,\n        height: height,\n        marginTop: \"-10px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }))))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"chart-container sub-chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: \"pieChart\",\n      style: {\n        width: width,\n        height: height\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default MapChartWrapper;","map":{"version":3,"sources":["/Users/wchen/Dropbox/UMN/2019_Fall/Job/code sample/sample/co2_emission/src/components/MapChartWrapper.js"],"names":["React","Component","allData","MapChart","PieChart","d3","topojson","Container","Row","Col","MapChartWrapper","constructor","state","data","extremeYears","currentYear","currentDataType","geoData","width","height","promises","json","csv","row","continent","Continent","country","Country","countryCode","emissions","emissionsPerCapita","region","Region","year","Year","Promise","all","then","ready","bind","catch","error","console","log","mapData","extent","d","select","attr","feature","objects","countries","features","node","offsetWidth","setState","mapchart","refs","mapChart","piechart","pieChart","drawMap","drawPie","property","on","event","target","value","selectAll","active","properties","componentDidMount","shouldComponentUpdate","componentWillReceiveProps","render","backgroundColor","paddingBottom","marginTop"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport allData from \"../data/all_data.csv\";\nimport MapChart from \"./MapChart\";\nimport PieChart from \"./PieChart\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport \"../css/MapChartWrapper.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nclass MapChartWrapper extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: \"\",\n      extremeYears: \"\",\n      currentYear: \"\",\n      currentDataType: \"\",\n      geoData: \"\",\n      width: \"\",\n      height: \"\"\n    };\n\n    var promises = [\n      d3.json(\"http://unpkg.com/world-atlas@1.1.4/world/50m.json\"),\n      d3.csv(allData, row => {\n        return {\n          continent: row.Continent,\n          country: row.Country,\n          countryCode: row[\"Country Code\"],\n          emissions: +row[\"Emissions\"],\n          emissionsPerCapita: +row[\"Emissions Per Capita\"],\n          region: row.Region,\n          year: +row.Year\n        };\n      })\n    ];\n    Promise.all(promises)\n      .then(data => {\n        this.ready.bind(this)(data[0], data[1]);\n      })\n      .catch(error => {\n        console.log(\"error\", error);\n      });\n  }\n\n  ready(mapData, data) {\n    var extremeYears = d3.extent(data, d => d.year);\n    var currentYear = extremeYears[0];\n    var currentDataType = d3\n      .select('input[name=\"data-type\"]:checked')\n      .attr(\"value\");\n    console.log(\"ho??\", currentDataType);\n\n    var geoData = topojson.feature(mapData, mapData.objects.countries).features;\n\n    var width = +d3.select(\".chart-container\").node().offsetWidth;\n\n    var height = 300;\n\n    this.setState({\n      data,\n      extremeYears,\n      currentYear,\n      currentDataType,\n      geoData,\n      width,\n      height,\n      mapchart: new MapChart(this.refs.mapChart),\n      piechart: new PieChart(this.refs.pieChart)\n    });\n\n    this.state.mapchart.drawMap(geoData, data, currentYear, currentDataType);\n    this.state.piechart.drawPie(data, currentYear);\n\n    d3.select(\"#year\")\n      .property(\"min\", currentYear)\n      .property(\"max\", extremeYears[1])\n      .property(\"value\", currentYear)\n      .on(\"input\", () => {\n        currentYear = +d3.event.target.value;\n        this.state.mapchart.drawMap(\n          geoData,\n          data,\n          currentYear,\n          currentDataType\n        );\n        //   drawPie(data, currentYear);\n        //   highlightBars(currentYear);\n      });\n\n    d3.selectAll('input[name=\"data-type\"]').on(\"change\", () => {\n      var active = d3.select(\".active\").data()[0];\n      var country = active ? active.properties.country : \"\";\n      currentDataType = d3.event.target.value;\n      this.state.mapchart.drawMap(geoData, data, currentYear, currentDataType);\n      //   drawBar(data, currentDataType, country);\n    });\n  }\n\n  componentDidMount() {\n    // this.setState({\n    //   mapchart: new MapChart(this.refs.mapChart)\n    // });\n  }\n\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  componentWillReceiveProps() {\n    //     const { geoData, data, currentYear } = this.state;\n    //     this.state.mapchart.drawMap(geoData, data, currentYear);\n    // const { geoData, data, currentYear, currentDataType } = this.state;\n    // this.state.mapchart.drawMap(geoData, data, currentYear, currentDataType);\n  }\n\n  render() {\n    const { width, height, currentDataType } = this.state;\n    console.log(\"currentDataType:\", currentDataType);\n\n    return (\n      <div>\n        <h2 className=\"dashboard-title\">\n          CO<sub>2</sub> Emissions in Twenty-One Years\n        </h2>\n        <Container className=\"data-dashboard\">\n          <Row>\n            <Col\n              sm={4}\n              style={{ backgroundColor: \"#202020\", paddingBottom: \"50px\" }}\n            >\n              <div id=\"nav\">\n                <p>\n                  Explore CO<sub>2</sub> emissions by year. Current year:{\" \"}\n                  <span id=\"year-val\"></span>\n                  <input id=\"year\" type=\"range\" step=\"1\" />\n                </p>\n                <p>\n                  Choose between total emissions or emissions per capita.\n                  <input\n                    type=\"radio\"\n                    name=\"data-type\"\n                    value=\"emissions\"\n                    defaultChecked\n                  />\n                  <label>Emissions</label>\n                  <input\n                    type=\"radio\"\n                    name=\"data-type\"\n                    value=\"emissionsPerCapita\"\n                  />\n                  <label>Emissions Per Capita</label>\n                </p>\n                <p>Click on a country to see its trends by year.</p>\n              </div>\n            </Col>\n            <Col sm={8} style={{ backgroundColor: \"#202020\" }}>\n              <div className=\"chart-container\">\n                <div\n                  ref=\"mapChart\"\n                  style={{ width: width, height: height, marginTop: \"-10px\" }}\n                ></div>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n\n        <div>\n          <div className=\"chart-container sub-chart\">\n            <div ref=\"pieChart\" style={{ width: width, height: height }}></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MapChartWrapper;\n"]},"metadata":{},"sourceType":"module"}