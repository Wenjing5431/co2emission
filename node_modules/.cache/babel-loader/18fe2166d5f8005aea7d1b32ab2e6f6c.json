{"ast":null,"code":"var _jsxFileName = \"/Users/wchen/Dropbox/UMN/2019_Fall/Job/code sample/sample/co2_emission/src/components/MapChartWrapper.js\";\nimport React, { Component } from \"react\";\nimport allData from \"../data/all_data.csv\";\nimport MapChart from \"./MapChart\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\n\nclass MapChartWrapper extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: \"\",\n      extremeYears: \"\",\n      currentYear: \"\",\n      //   currentDataType: \"\",\n      geoData: \"\",\n      width: \"\",\n      height: \"\"\n    };\n    var promises = [d3.json(\"http://unpkg.com/world-atlas@1.1.4/world/50m.json\"), d3.csv(allData, row => {\n      return {\n        continent: row.Continent,\n        country: row.Country,\n        countryCode: row[\"Country Code\"],\n        emissions: +row[\"Emissions\"],\n        emissionsPerCapita: +row[\"Emissions Per Capita\"],\n        region: row.Region,\n        year: +row.Year\n      };\n    })];\n    Promise.all(promises).then(data => {\n      this.ready.bind(this)(data[0], data[1]);\n    }).catch(error => {\n      console.log(\"error\", error);\n    });\n  }\n\n  ready(mapData, data) {\n    var extremeYears = d3.extent(data, d => d.year);\n    var currentYear = extremeYears[0];\n    var currentDataType = d3.select('input[name=\"data-type\"]:checked').attr(\"value\");\n    console.log(\"currentdata:\", currentYear);\n    var geoData = topojson.feature(mapData, mapData.objects.countries).features;\n    console.log(\"geoData:\", geoData);\n    var width = +d3.select(\".chart-container\").node().offsetWidth;\n    var height = 300;\n    this.setState({\n      data,\n      extremeYears,\n      currentYear,\n      currentDataType,\n      geoData,\n      width,\n      height\n    }); // const { geoData, data, currentYear } = this.state;\n\n    this.state.mapchart.drawMap(geoData, data, currentYear);\n  }\n\n  componentDidMount() {\n    this.setState({\n      mapchart: new MapChart(this.refs.mapChart)\n    });\n  }\n\n  shouldComponentUpdate() {\n    return false;\n  } //   componentWillReceiveProps() {\n  //     const { geoData, data, currentYear } = this.state;\n  //     this.state.mapchart.drawMap(geoData, data, currentYear);\n  //   }\n  //   componentWillReceiveProps(nextProps) {\n  //     this.state.chart.update3(nextProps.gender);\n  //   }\n\n\n  render() {\n    const {\n      width,\n      height,\n      currentDataType\n    } = this.state;\n    console.log(\"currentDataType\", currentDataType);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"nav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"CO\", React.createElement(\"sub\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"2\"), \" Dashboard\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Explore CO\", React.createElement(\"sub\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"2\"), \" emissions by year. Current year:\", \" \", React.createElement(\"span\", {\n      id: \"year-val\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      id: \"year\",\n      type: \"range\",\n      step: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Choose between total emissions or emissions per capita.\", React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"data-type\",\n      value: \"emissions\",\n      checked: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Emissions\"), React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"data-type\",\n      value: \"emissionsPerCapita\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Emissions Per Capita\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Click on a country to see its trends by year.\")), React.createElement(\"div\", {\n      ref: \"mapChart\",\n      className: \"chart-container\",\n      style: {\n        width: width,\n        height: height\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default MapChartWrapper;","map":{"version":3,"sources":["/Users/wchen/Dropbox/UMN/2019_Fall/Job/code sample/sample/co2_emission/src/components/MapChartWrapper.js"],"names":["React","Component","allData","MapChart","d3","topojson","MapChartWrapper","constructor","state","data","extremeYears","currentYear","geoData","width","height","promises","json","csv","row","continent","Continent","country","Country","countryCode","emissions","emissionsPerCapita","region","Region","year","Year","Promise","all","then","ready","bind","catch","error","console","log","mapData","extent","d","currentDataType","select","attr","feature","objects","countries","features","node","offsetWidth","setState","mapchart","drawMap","componentDidMount","refs","mapChart","shouldComponentUpdate","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport allData from \"../data/all_data.csv\";\nimport MapChart from \"./MapChart\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\n\nclass MapChartWrapper extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: \"\",\n      extremeYears: \"\",\n      currentYear: \"\",\n      //   currentDataType: \"\",\n      geoData: \"\",\n      width: \"\",\n      height: \"\"\n    };\n\n    var promises = [\n      d3.json(\"http://unpkg.com/world-atlas@1.1.4/world/50m.json\"),\n      d3.csv(allData, row => {\n        return {\n          continent: row.Continent,\n          country: row.Country,\n          countryCode: row[\"Country Code\"],\n          emissions: +row[\"Emissions\"],\n          emissionsPerCapita: +row[\"Emissions Per Capita\"],\n          region: row.Region,\n          year: +row.Year\n        };\n      })\n    ];\n    Promise.all(promises)\n      .then(data => {\n        this.ready.bind(this)(data[0], data[1]);\n      })\n      .catch(error => {\n        console.log(\"error\", error);\n      });\n  }\n\n  ready(mapData, data) {\n    var extremeYears = d3.extent(data, d => d.year);\n    var currentYear = extremeYears[0];\n    var currentDataType = d3\n      .select('input[name=\"data-type\"]:checked')\n      .attr(\"value\");\n    console.log(\"currentdata:\", currentYear);\n    var geoData = topojson.feature(mapData, mapData.objects.countries).features;\n    console.log(\"geoData:\", geoData);\n\n    var width = +d3.select(\".chart-container\").node().offsetWidth;\n\n    var height = 300;\n\n    this.setState({\n      data,\n      extremeYears,\n      currentYear,\n      currentDataType,\n      geoData,\n      width,\n      height\n    });\n\n    // const { geoData, data, currentYear } = this.state;\n    this.state.mapchart.drawMap(geoData, data, currentYear);\n  }\n\n  componentDidMount() {\n    this.setState({\n      mapchart: new MapChart(this.refs.mapChart)\n    });\n  }\n\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  //   componentWillReceiveProps() {\n  //     const { geoData, data, currentYear } = this.state;\n  //     this.state.mapchart.drawMap(geoData, data, currentYear);\n  //   }\n\n  //   componentWillReceiveProps(nextProps) {\n  //     this.state.chart.update3(nextProps.gender);\n  //   }\n\n  render() {\n    const { width, height, currentDataType } = this.state;\n    console.log(\"currentDataType\", currentDataType);\n\n    return (\n      <div>\n        <div id=\"nav\">\n          <h2>\n            CO<sub>2</sub> Dashboard\n          </h2>\n          <p>\n            Explore CO<sub>2</sub> emissions by year. Current year:{\" \"}\n            <span id=\"year-val\"></span>\n            <input id=\"year\" type=\"range\" step=\"1\" />\n          </p>\n          <p>\n            Choose between total emissions or emissions per capita.\n            <input type=\"radio\" name=\"data-type\" value=\"emissions\" checked />\n            <label>Emissions</label>\n            <input type=\"radio\" name=\"data-type\" value=\"emissionsPerCapita\" />\n            <label>Emissions Per Capita</label>\n          </p>\n          <p>Click on a country to see its trends by year.</p>\n        </div>\n\n        <div\n          ref=\"mapChart\"\n          className=\"chart-container\"\n          style={{ width: width, height: height }}\n        ></div>\n      </div>\n    );\n  }\n}\n\nexport default MapChartWrapper;\n"]},"metadata":{},"sourceType":"module"}